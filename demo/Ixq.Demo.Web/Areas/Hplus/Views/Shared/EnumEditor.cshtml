@using Ixq.Extensions
@model IPropertyEditModel
@{
    var isHasFlags = Model.RuntimeProperty.PropertyType.HasAttribute<FlagsAttribute>();
    var enumItem = TypeExtensions.GetEnumItems(Model.RuntimeProperty.PropertyType);
}
<div class="form-group">
    <label class="col-sm-3 control-label">@Model.RuntimeProperty.Name：</label>
    <div class="col-sm-8">
        @if (isHasFlags)
        {
            var i = 0;
            foreach (var item in enumItem)
            {
                <div class="checkbox checkbox-inline">
                    <input class="@(Model.RuntimeProperty.PropertyInfo.Name)" type="checkbox" id="@(Model.RuntimeProperty.PropertyInfo.Name)_@i" value="@item.Value" />
                    <label for="@(Model.RuntimeProperty.PropertyInfo.Name)_@i"> @item.Name </label>
                </div>
                i++;
            }
            <input type="hidden" id="@(Model.RuntimeProperty.PropertyInfo.Name)" name="@(Model.RuntimeProperty.PropertyInfo.Name)" value="@Model" />
        }
        else
        {
            <select class="form-control" name="@Model.RuntimeProperty.PropertyInfo.Name" @Html.Raw(Model.RuntimeProperty.IsRequired ? "required=\"\"" : "")>
                @if (!Model.RuntimeProperty.IsRequired)
                {
                    <option>请选择</option>
                }
                @foreach (var item in enumItem)
                {
                    <option value="@item.Value">@item.Name</option>
                }
            </select>
        }
    </div>
</div>
@Html.Script(
    @<script>
        $(document).ready(function () {

            $('input[type="checkbox"][class="@(Model.RuntimeProperty.PropertyInfo.Name)"]').change(function () {
                console.log($(this).prop('checked'));
            });

        });
    </script>
    )